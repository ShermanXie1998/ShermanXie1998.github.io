[{"content":"虚幻5初体验 虚幻5的抢先体验版已经发布到了Epic Game Launcher上，对应的源码工程也可以在官方的Github网站上拿到。\n\r\n虚幻引擎5中文技术文档: https://docs.unrealengine.com/5.0/zh-CN/\n虚幻引擎5源码地址: https://github.com/EpicGames/UnrealEngine/tree/ue5-early-access\n虚幻引擎5官方入门课程链接: https://www.unrealengine.com/zh-CN/onlinelearning-courses/ue5-early-access-quickstart\n此外，官方还免费给用户提供了视频演示中的Demo，方便大家快速体验新的功能与特性。（备注：工程98GB，最低系统要求为NVIDIA GTX 1080/AMD RX Vega 64或以上显卡，8GB显存、32GB系统内存）\n\r\n打开编辑器，会发现虚幻5的界面有了较大的改动。扁平化的设计使界面看起来更为清晰和简洁，很大程度地改善了用户的预览体验。\n\r\n当然，虚幻5的重头戏主要在新发布的两个核心技术上，Nanite和Lumen。我们可以通过Demo预览一个拥有数亿个三角形的场景，也可以动态调整光源参数来实时预览全局光照效果。\n\r\n除了渲染上的变化,还有很多新的功能:  引擎内置集成了Quxiel的Bridge工具，可以直接将扫描的高清资产拖入到引擎中使用. 提供了全新的关卡加载系统WorldPartition，可以实时灵活地加载地图数据 全新的关卡协作编辑方式，支持多人合作编辑关卡，提供工作效率 提供了新的GameplayFeaturePlugin，可以迅速设计玩法原型 FullBodyIK、Root Motion Warpping等新的动画系统，可以自适应地形的实时调整骨骼位置 ControlRig得到完善，可以在编辑器内自定义调整骨骼动画，动画工作流程得到进一步优化 MetaSound，可以在编辑器内对音频做更为丰富的操作 Perforce插件支持Change list版本管理 支持Python脚本  \r\n 技术 如果有朋友和我一样一直在关注着虚幻5，就会发现它早已不像最初那般神秘，各路大佬的深挖也让我们能更客观地看待这个引擎和相关的技术。\n虚幻5最具代表性和影响力的核心技术有两项 ：Nanite和Lumen\nNanite Nanite，中文翻译为虚拟微多边形体几何体技术，简单来说就是引擎可以在运行时支持包含几乎无限个三角面的模型，即美术们可以将拥有数以亿计的多边形的模型直接导入到虚幻引擎中使用。如果这项技术真的能在工业界广泛应用，对游戏和影视行业的影响可以说是颠覆性的。\n\r\n科普一下，我们常见的三维游戏世界（或CG场景）一般都是由三角面构成的，计算机通过对三角面逐个渲染从而展示出整个画面。一个3A游戏场景往往由数千万个三角面构成（包括人物、地形、建筑等），而一个科幻电影更是夸张到需要对数亿甚至数十亿的三角面进行渲染。\n显然，三角面的数量越多，渲染的速度就越慢（虽然现在的显卡越来越强大），所以对于需要实时渲染的游戏来说，除了想尽办法剔除不展示的三角面，减少可见的三角面也是一个不得不做的妥协。\n\r\n那么如何减少可见的三角面呢？技术上我们可以采用LOD动态减少三角面的数量（边坍缩技术）。但工业界常用的手段是在一开始就限制主模型的面数，一般会先在Zbrush里制作高模，然后烘焙置换贴图或法线贴图到低模上（保存更多的细节信息用于渲染流程中的光照计算），这样一个面数很低的模型也能表现出接近高模的效果。\n显然这是为了性能的不得已而为，关注点集中在艺术效果的美术们必然不喜欢这冗余而繁杂的流程。如果虚幻5真的可以支持近乎无限的三角面数量，那么一定会大大解放艺术家们的生产力，这套高模烘焙低模的方式也会随着历史的推进逐渐被掩埋。\n\r模型制作流程\r\n相比画面效果，程序们当然更关注技术细节。从名字“虚拟微多边形”的“虚拟”二字，我们就很容易联想到操作系统中的虚拟内存技术。“虚拟内存”技术的核心思想是将硬盘虚拟为内存，通过动态替换的方式解决内存空间不足的问题（当然还有其他很多方面的意义）。\n\r虚拟内存示意(简化版)\r\n同理，渲染领域也有一个原理类似的技术称为“虚拟纹理”，由于GPU的显存有限，无法将一个复杂大场景的纹理全部存储，因此可以将这些纹理合成之后再存储到硬盘中。在渲染时根据屏幕上用到的资源索引进行实时更新，图形大神卡马克在2000年左右就成功地将纹理虚拟化技术应用在了游戏毁灭战士3（Doom 3）中。\n\r虚拟纹理示意\r\n按照这个思路，几何模型似乎也可以做“虚拟化”。其实类似的技术很早就出现了，上世纪80年代初，卢卡斯影业图形学部门几位大师做出的REYES渲染架构，把参数化曲面动态细分成微多边形，再用算法筛选出接近1像素大小的微表面并进行渲染。卡马克后来尝试了这种方案，但是由于几何体存储方式特殊、GPU管线性能等原因，该方案在很长一段时间没有达到预期的效果，毕竟硬件基础决定上层建筑。\n\rReyes Rendering on the GPU\r\n不过很快，随着Computer shader的出现，显卡可以做更多通用的计算，原来复杂且效率较低的渲染管线也可以通过Mesh Shader的方式进行优化，Billion级别的三角形绘制似乎变得可能。\n\rCompute Shaders: Optimize your engine using compute，AMD\r\nEpic作为长期研究各种引擎技术（CEO Tim 就曾将REYES和光追定位成为了两大GPU的发展方向）并不断落地工业界的领军者，在Computer shader出现的第一时间就抓住了机会，公开了虚幻5的虚拟微多边形体几何体技术的演示Demo，轰动了整个行业。从官方透漏的信息来看，出于对通用性的考虑，他们并没有使用英伟达提供的Meshshader技术而是直接利用ComputerShader做软光栅，同时配合自定义的算法做像素级别的三角面剔除，真正的实现了无限制的“LOD”。\n很巧的是，最近网易雷火工作室在虚幻5正式公布前发布了类似Nanite的“无矩渲染技术”，同样也是采用3D扫描技术+ComputerShader（确切的说是MeshShader，与虚幻5不同）的方式来实现高精度模型的渲染，从而能够支持面数高达二十一亿的游戏场景。而且他们已经将场景发布到了逆水寒的周版本更新包，足以看出几何模型虚拟化技术已经部分应用到实际生产环境中，前景也逐渐明朗起来。\n\r3D扫描建模技术在《逆水寒》端游中的落地应用\r\n说了这么多，Nanite真的能立刻颠覆游戏行业么？当然不能。首先从技术上讲，Nanite很明显还有诸多限制，比如目前不支持骨骼模型（即人物模型）的渲染、比如Demo中展示的高精度场景需要用3D扫描技术，而很多物体的材质难以扫描（比如大气、水体或是非真实感渲染的对象等）。虽然虚幻通过收购Quixel给用户提供了大量免费高精度资产，但实际生产环境相当复杂，使用过程中必然会暴露出诸多方面的问题。\n\r\n其次，如此复杂且高精度的模型还有对应的高精度贴图很快就会将你的硬盘塞满，导入导出操作对机器的带宽也是一个考验。经过今天对Demo的测试，我发现不配一台1T SSD+2080ti显卡的机器真的没办法流畅地使用。\n最后，任何一项技术从出现到广泛使用都是一个漫长的过程，哪个公司做产品会立刻使用新技术而放弃当前稳定的流水线呢？就算可以，新工作流的磨合是不是也需要一段时间？人员的学习和培养是不是也要时间？所以大家还是要理性看待，根据实际情况决定是否使用Nanite。但是不管怎么说，单从支持几乎无限的模型面数这一成果来说已经足够了，可以预见未来Nanite将促进3D扫描技术在相关行业中的应用，扫描建模和美术资产制作流程的结合也许会逐渐成为业内的主流方案。\nLumen Lumen，是一个全动态全局光照解决方案，可以实时对场景和光照变化做出反应而无需专门的光线追踪硬件。因为光线的反射，在现实环境中你很难看到一个物体没有任何颜色（即使他处于一个很暗的角落里）。全局光照（GI）简单来说就是模拟真实环境中光线可以近乎无限次反射到各个地方的效果，实现全局光的核心思想就是光线追踪，也就是需要正确计算光线会击中哪些三角面。然而实际情况中我们往往会采用光照贴图预先烘焙的方式，在避免大量实时计算的同时实现质量相对较高的效果，因此你会发现很多游戏的场景中光照效果都是几乎不变的。\n\rcornell box\r\n左边是照片，右边是全局光照的渲染效果\nGI技术其实一直在被研究和使用，主要从硬件和软件两个方面进行优化。硬件方面主要使用RTX技术做加速计算，软件方面主要使用各种自定义的加速结构来简化计算，比如基于体素（voxel）和基于屏幕空间的的全局光照算法。Lumen就是一个结合了软件层面的多个全局光照算法的方案，对于远处的场景使用体素计算，近处的使用屏幕空间的光线追踪修正。\n\r\nLumen的优越之处在于它每次更新光源时不需要等待贴图的烘焙和频繁地修改光照贴图UV，从而大幅度提高美术的工作效率。同时，配合Nanite技术，可以实现非常精细和逼真的反射效果。\n说到这里，发现一个很有意思的点，为了高效地实现理想的渲染效果，人们一直在三维空间着色和屏幕空间着色中反复横跳。三维模型太多？那我们拿到屏幕空间去统一处理（Pixel shader）。GPU性能上来了但屏幕空间效果不完美？要不再回去优化一下模型的着色逻辑。拓展一下，其实我们经常遇到类似的问题，运行速度太慢？先把数据缓存到内存里。内存占用太大？那我实时去计算结果。很多时候，我们就是在对各种方案做取舍，而且随着技术（比如硬件）的发展，之前很老的方案可能就会再次被利用起来（实时光追，深度学习等）。\n其他相关的技术比如Chaos物理与破坏系统、Niagara、动态IK、卷积混响和环境立体声渲染等，其实在19年就已经陆续地添加到虚幻4引擎了，不过一直在完善，这里就不再赘述。\n\r图片里面的人物都是由Niagara粒子实现的\r\n 谈谈游戏引擎 关于虚幻引擎，其实接触的多了，就会发现Unreal是一个结果导向的引擎，用户想要什么功能我们就做什么。由于Epic的团队本身也是游戏开发者，所以他们同时也是虚幻引擎最为忠实的用户，可以从用户的角度考虑大家的需求，我想这也是Unreal备受广大美术和策划喜爱的原因。相比之下，Unity看起来更追求架构上的完美以及技术上的革新，他们会实时地更新各种前沿的技术和设计（如深度学习框架），不断调整和优化代码框架（DOTS）。虽然也在努力提供各种工具支持，但毕竟精力有限，短期内容易造成各项工具链功能不完善、使用体验差的问题。\n\r\n当然虚幻引擎的结果导向不代表他们不在意系统架构，Epic的CEO TimSweedey早在2005年就已经构思出了虚幻引擎未来的发展方向，比如引擎的计算架构分层\n 图形层：利用GPU处理并行数据 计算密集层(物理，碰撞检测，场景遍历，寻路)：线程并行 (TaskGraph + ISPC, ISPC为数据并行) 业务逻辑层：软件事务 STM  \rThe Next Mainstream Programming Language: A Game Developer’s Perspective\r\n现在的虚幻也确实是这个思路，管线、数据密集计算等已经交给ISPC（物理模拟），也会用类似ECS的思想做一些插件的设计，这些和Unity的Burst+Job系统是相似的，只不过虚幻引擎以UObject为中心构成的整个系统（特别是Actor）过于臃肿，很多上层系统有点强制用户使用的意思，这算是历史遗留问题。\n了解过二者发展历史和未来的Roadmap的朋友都可以理解，哪有什么各方面都无敌的引擎，不过是数十年来无数从业者一点点的积累和优化罢了。\n\r虚幻引擎的RoadMap（发展路线规划）\r\n 未来 目前来看，对于游戏行业，如果真的能放弃贴图和UV这种为了提高性能而做出的妥协，那么高质量游戏的成本会大大降低（注意，主要针对高品质高画质的游戏）。和虚幻4带来的影响相似，小团队的作品天花板会不断提高，更多意想不到的优秀作品会涌现出来。\n对于成熟的商业项目来说，渲染只是其中一环，最终的呈现与很多方面有关，因此Nanite和Lumen等技术对项目整体带来的提升非常有限。不过好在UE5的关注点不是只在渲染上，动画、音频、Gameplay、协作等方面的新功能也会给开发者带来巨大的帮助。\n对于影视行业来说，对其产生最大冲击的并不是虚幻5本身，而是拥有高质量渲染效果和配套工具流的实时游戏引擎（包括虚幻4和Unity，以及各个大公司自研的引擎或工具）。鉴于实时渲染技术的不断革新，现在已经有不少企业使用虚幻引擎了（国内动画公司用的比较多）。我们可以在Daz里面找到合适的数字人，在Quixel的Megascan找到合适的扫描模型（UE用户免费使用），再花钱买点表情捕捉和动作捕捉的方案，而且未来的虚拟影片制作成本一定是会进一步降低，创作影片好像也没那么难了。\n\r美剧《曼达洛人》使用虚幻4做场景\r\n技术不断发展，画质仍会提升，但人们可能不会再局限于对画质的无限追求了，那渲染技术的尽头是什么呢？\n期待虚幻5的进一步表现，也期待数字时代的真正到来。我相信我们正身处信息革命的浪潮，既是历史的见证者，也是历史的参与者。\n 原文  游戏开发那些事  Image Share \rPhoto by Florian Klauer on Unsplash\r \rPhoto by Luca Bravo on Unsplash\r\n相册语法来自 Typlog\n","date":"2021-08-25T00:00:00Z","image":"https://ShermanXie1998.github.io/p/ue5%E7%9A%84%E9%BB%91%E7%A7%91%E6%8A%80%E6%8E%A2%E5%AF%BB/8-25img1_hubbb8a5f605aee4deb2af4a73d100c650_67922_120x120_fill_q75_box_smart1.jpg","permalink":"https://ShermanXie1998.github.io/p/ue5%E7%9A%84%E9%BB%91%E7%A7%91%E6%8A%80%E6%8E%A2%E5%AF%BB/","title":"UE5的黑科技探寻"},{"content":"引言  技术写作工具|Github + Markdown 的新轻型技术写作模式速览 技术文档方案|Github + Markdown 的深度实践解析  新建一个GitHub库   注册一个 GitHub 账号。如果你已有账号，直接登录。如果你没有账号，注册并登录。\n  打开 GitHub Pages 官网，浏览并了解 User or organization site 部分对应的操作步骤。 GitHub Pages: https://pages.github.com\n  新建一个 GitHub repository，库名为 username.http://github.io，username 即你的 GitHub 账号 username。新建 repository：github.com/new \r\n   安装Hugo并新建Hugo网站 此部分网上的方法很多,因此不过多赘述.\nHugo安装指南 https://gohugo.io/getting-started/installing/\n 构建Hugo网站 在Hugo网站文件夹的根目录下,执行hugo命令来构建\n$ hugo # 构建你的Hugo网站,默认将静态站点保存到\u0026#34;public\u0026#34;目录 注意: Hugo会将构建的网站内容默认保存至网站根目录的 public/文件夹中.\n 将网站文件夹转换为 Git 库。 1.进入 XXX/public目录,初始化Git库.\n$ cd public $ git init #初始化Git库 2.查看public目录下的文件,会发现多了.git文件.\n$ ls -a 显示所有文件和目录列表, 包含隐藏文件  将Git本地库关联至远程库 1.在 XXX/public目录下,为Git本地库添加远程库\ngit remote add origin git@github.com:XXX/XXX.github.io.git 2.查看config文件.\ncat .git/config # 显示 config 信息。 上述命令返回结果如下：\n[core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = true [remote \u0026#34;origin\u0026#34;] url = git@github.com:lilin90/lilin90.github.io.git fetch = +refs/heads/*:refs/remotes/origin/* 如果 [remote \u0026ldquo;origin\u0026rdquo;] 信息正常显示，说明你的 Git 本地库已成功关联至远程库。\n 提交你的修改至本地库. 在 lilian-blog/public 目录下，通过 commit 提交修改，并写一个 commit message 来简洁描述你的修改。\ngit status # 查看当前修改状态。 git add . # 添加所有修改过的文件。你也可以只添加某个文件。 git commit -m \u0026#34;Add a new post\u0026#34; # \u0026#34;Add a new post\u0026#34; 是 commit message. 将你的修改推至远程库。 在 lilian-blog/public 目录下，将修改推至远程库。\ngit push -u origin master 恭喜！现在你已经走完了全程，拥有了一个自己构建的博客网站。\n我的博客地址是：https://lilin90.github.io\n如果你想使用 HTTPS 以防止其他人窥探或篡改网站流量，在 GitHub 上打开相应的库，点击 Settings 勾选 Enforce HTTPS 即可。\n顺便说一下，我购买了个域名 https://lilianlee.me，并将其关联到了默认的 URL https://lilin90.github.io。所以如果你访问 https://lilin90.github.io，会自动跳转至 https://lilianlee.me。\n接下来：之后如何添加一篇博客 之后如果要添加一篇博客，使用如下几步即可：\n 新建一篇文章，编辑内容。 本地预览网站呈现效果。 构建 Hugo 网站。 提交修改至 Git 本地库。 将修改推至远程库。  原文  如何利用 GitHub Pages 和 Hugo 轻松搭建个人博客？  Image Share \rPhoto by Florian Klauer on Unsplash\r \rPhoto by Luca Bravo on Unsplash\r\n相册语法来自 Typlog\n","date":"2021-08-24T00:00:00Z","image":"https://ShermanXie1998.github.io/p/%E5%88%A9%E7%94%A8github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/8-23-img12_hu28e1bbbeb17e57911039f31275b038b2_392724_120x120_fill_q75_box_smart1.jpg","permalink":"https://ShermanXie1998.github.io/p/%E5%88%A9%E7%94%A8github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","title":"利用GitHub Pages搭建个人博客"},{"content":"引言 在阅读本文前,请先确定您使用开发是基于Visual studio 2019的UWP平台.\n1.创建证书 打开你的Package文件,点击publisher的选择证书,然后点击创建新证书.\n这里只需要输入Publisher Common Name,先不要填,往下看.\n 2.找到Publisher Common Name. 首先我们需要打开微软的合作中心,请确保你拥有一个开发者账号,如果没有的话你是进不到这个网页里的.\n你需要先点击概述,创建新应用或选择你已经创建好需要发布的应用.然后点击产品管理里的产品标识.\n在此界面上只需要把\u0026quot;包/标识/发行商\u0026quot;里CN后面的一串数字复制,然后再粘贴到Visual Studio内的Publisher Common Name内即可.这样你的信任证书就已经生成了.\n 3.如何进行打包 首先,你需要点击Project-\u0026gt;项目属性-\u0026gt;Bulid,把Platform target选择到你所需要的平台,开启.Net本地链与优化代码,进行此步骤的原因是要生成用于商店发布的misxupload文件.\n然后右键你的项目,点击publish-\u0026gt;创建APP package\n选择第二个选项,然后登录你的账户后选择你要发布到Microsoft store的Identity.更改你所需的APP版本号与所需平台后即可点击创建.\n  在此处要注意的是,发布版本只能越来越大,不能在商店上发布一个高版本后再降低版本号.\n  另外如果你使用了第三方的依赖,一定要确定可以在你所打包的平台(x86/x64)下可以运行,不然也不会打包成功.\n   4.上传至商店 在你编译软件的目录内寻找AppPackages的文件,打开后找到后缀为Msixupload的文件.然后回到微软的合作中心页面,在应用程序概述内找到提交-\u0026gt;程序包,然后把你刚生成的Msixupload文件上传上去.这样关于UWP第三方文件的打包与上传就完成了.\n 5.UWP上架失败因为没有添加隐私策略问题 在使用 UWP 上架之前需要经过微软的审核，在美国很看重个人隐私，因此需要在两个地方都填写上隐私策略。第一个是应用商店里面，第二个是应用程序里面 如果是个人开发者，我的推荐是在 github 或 gitee 创建一个叫隐私策略的文件，复制这个链接填写在应用商店管理的属性上，请看下图\n如何写隐私策略请看 win10 uwp 隐私声明 注意修改软件名然后打开代码，在代码里面添加一个叫 PrivacyPolicyURL 的静态属性，将隐私策略放在这个属性，然后写一个文本超链接用于打开\npublic static class PrivacyPolicy { public static string PrivacyPolicyURL { get; } = \u0026#34;https://github.com/lindexi/UWP/blob/master/uwp/src/%E9%9A%9 0%E7%A7%81%E7%AD%96%E7%95%A5/Privacy%20Policy.md\u0026#34;; } 在界面添加超链接\n\u0026lt;TextBlock\u0026gt; \u0026lt;Hyperlink NavigateUri=\u0026#34;https://github.com/lindexi/UWP/blob/master/uwp/src/%E9 %9A%90%E7%A7%81%E7%AD%96%E7%95%A5/Privacy%20Policy.md\u0026#34;\u0026gt;隐私策略\u0026lt;/Hyperlink\u0026gt; \u0026lt;/TextBlock\u0026gt; 修改之后请重新上传新的包\n如果此时发现无法上传新的包，而在认证里面有附加了联系的邮件地址，如文章最后附加的微软给我的信息，可以看到微软告诉我说联系 reportapp@microsoft.com 邮件\n可以通过谷歌翻译的方式告诉微软的大佬说我的应用已经更新了，里面填写了隐私声明了。小窍门，即使咱之前已经写过了，也是要给他一点面子，还是说咱改了软件了，感谢你的提示。另外在发邮件的时候记得附加自己应用的 Id 哦，如可以这样写\n主题: I update my application 9NBLGGH562R2 and please review it 正文: Hi, My applicaion(App Id: 9NHNXT3Q2X7F) was publish fail and I have changed my app now, and please review it. Thank you. 请将 App id 替换为你的应用 Id 如何找到自己的应用 Id 请看下面\n可以找到应用号\n下面是微软发给我的信息\nPlease take the following action We reviewed your submission and identified some changes that are needed before we can publish or update the app. Please make these changes and resubmit your app. For more information, contact reportapp@microsoft.com Please include your app ID so we can act quickly. App Policies: 10.5.1 Personal Information Notes To Developer Because the app accesses personal information, a working link to a privacy policy must be provided. Location where privacy policy was missing: Metadata: OK In-product: Needs attention For metadata include the privacy policy URL during app submission under the Properties section in the “Privacy Policy URL” field. For in-product include the privacy policy URL under the settings section. For additional assistance with updating the privacy policy URL, please contact Developer Support via Dev Center or here: http://aka.ms/storesupport Personal information the app accesses includes: Photos (Picture gallery) Documents (device folders and files) Please Note Your current certification results might differ from earlier submissions because Microsoft Store policy requirements can change over time. When policies change, we might re-test according to the new requirements regardless of the submission type. Please always rely on your most recent certification results. 至于为什么我的图床应用需要写隐私策略?因为我访问了 Photos 文件夹和 Documents 文件夹.\n Image Share \rPhoto by Florian Klauer on Unsplash\r \rPhoto by Luca Bravo on Unsplash\r\n\rPhoto by Helena Hertz on Unsplash\r \rPhoto by Hudai Gayiran on Unsplash\r\n相册语法来自 Typlog\n原文  UWP 上架失败因为没有添加隐私策略  ","date":"2021-08-23T00:00:00Z","image":"https://ShermanXie1998.github.io/p/uwp%E4%B8%8A%E4%BC%A0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E7%9A%84%E6%89%93%E5%8C%85%E6%96%B9%E5%BC%8F/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://ShermanXie1998.github.io/p/uwp%E4%B8%8A%E4%BC%A0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E7%9A%84%E6%89%93%E5%8C%85%E6%96%B9%E5%BC%8F/","title":"UWP上传第三方包的打包方式"},{"content":"引言 使用美丽的 Ananke 主题创建一个 Hugo 站点。添加超时和断路器等等，所有这些功能都不必更改应用程序本身的代码。\n此快速入门macOS在示例中使用。有关如何在其他操作系统上安装 Hugo 的说明，请参阅安装。\n建议安装 Git来运行本教程。\n对于其他学习 Hugo 的方法，如书本或视频教程，请参阅外部学习资源页面。\nInstall Hugo 在 macOS、Windows、Linux、OpenBSD、FreeBSD 以及任何可以运行 Go 编译器工具链的机器上安装 Hugo。\n 适用于 x64、i386 和 ARM 架构的 macOS (Darwin) Windows Linux OpenBSD FreeBSD   Chocolatey (Windows) 如果您在 Windows 机器上并使用Chocolatey进行包管理，则可以使用以下单行安装 Hugo：\n$ choco install hugo -confirm 或者，如果您需要“扩展”Sass/SCSS 版本：\n$ choco install hugo-extended -confirm  Create a New Site $ hugo new site quickstart 创建名为quickstart的文件夹\n Add a Theme 有关要考虑的主题列表，请参阅themes.gohugo.io。本快速入门使用漂亮的Ananke 主题。\n首先，从 GitHub 下载主题并将其添加到您网站的themes目录中：\n$ cd quickstart $ git init $ git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 然后，将主题添加到站点配置中：\n$ echo theme = \\\u0026#34;ananke\\\u0026#34; \u0026gt;\u0026gt; config.toml  Add Some Content 您可以手动创建内容文件（例如 as content//.）并在其中提供元数据，但是您可以使用该new命令为您做一些事情（例如添加标题和日期）：\n$ hugo new posts/my-first-post.md 如果需要，编辑新创建的内容文件，它将以如下内容开头：\n--- title: \u0026#34;My First Post\u0026#34; date: 2019-03-26T08:47:11+01:00 draft: true --- Start the Hugo server $ hugo server -D Customize the Theme 您的新网站看起来不错，但在向公众发布之前，您需要对其进行一些调整。\nconfig.toml在文本编辑器中打开：\nbaseURL = \u0026#34;https://example.org/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;My New Hugo Site\u0026#34; theme = \u0026#34;ananke\u0026#34; 用title更个性化的东西替换上面的内容。此外，如果您已经准备好域，请将baseURL. 请注意，运行本地开发服务器时不需要此值。\n提示：在 Hugo 服务器运行时对站点配置或站点中的任何其他文件进行更改，您将立即在浏览器中看到更改，但您可能需要清除缓存。\r有关特定于主题的配置选项，请参阅主题站点。\n原文  Hugo 快速入门  Image Share 相册语法来自 Typlog\n","date":"2021-08-23T00:00:00Z","image":"https://ShermanXie1998.github.io/p/%E4%BD%BF%E7%94%A8hugo%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%96%B9%E5%BC%8F/8-23-img8_hu6b55783027d380115166b71d4162847c_176297_120x120_fill_q75_box_smart1.jpg","permalink":"https://ShermanXie1998.github.io/p/%E4%BD%BF%E7%94%A8hugo%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%96%B9%E5%BC%8F/","title":"使用Hugo创建个人博客方式"},{"content":"准备工作 要学习本教程，我们需要先准备：\n  有 sudo 的 root 用户权限，大家可根据《Ubuntu 120.04初始服务器设置》（撰写中，稍后上线）指南来配置自己的服务器。\n  注册域名。本教程使用example.com作为范例。大家可以在阿里云购买一个域名，.com 域名一年60多块钱。\n  为服务器设置了以下两个DNS记录。\n example.com 的A记录指向服务器公网IP www.example.com的A记录指向服务器公网IP    请确保一个域对应一个server block。在本教程中，我们使用/etc/nginx/sites-available/example.com 来作为操作对象。\n  安装 Nginx 由于 Nginx 可以从 ubuntu 软件源中获得，因此我们可以使用 apt 来安装 Nginx。\n我们可以使用以下命令安装 Nginx 到 Ubuntu 中。\n$ sudo apt update $ sudo apt install nginx 选择 Y 来开始安装，apt 会帮你把 Nginx 和它所必备的依赖安装到我们的服务器中。\n 调整防火墙 在测试 Nginx 之前，我们需要调整防火墙，让他允许 Nginx 服务通过。Nginx ufw 在安装时会把他自身注册成为服务。\n$ sudo ufw app list 输出结果:\nkalasearch@chuan-server:~$ sudo ufw app list Available applications: Nginx Full Nginx HTTP Nginx HTTPS OpenSSH 你可以看到 Nginx 提供了三个配置文件：\n Nginx Full  开端口80 正常，未加密的网络流量 端口443 TLS / SSL加密的流量   Nginx HTTP  仅打开端口80 正常，未加密   Nginx HTTPS  仅打开端口443 TLS / SSL加密    我们使用 Nginx HTTPS 来做本教程演示。\n$ sudo ufw allow \u0026#39;Nginx HTTPS\u0026#39; 我们用以下命令来查看更改结果\n$ sudo ufw status 我们可以在输出结果中看到\nStatus: active To Action From -- ------ ---- OpenSSH ALLOW Anywhere Nginx HTTP ALLOW Anywhere OpenSSH (v6) ALLOW Anywhere (v6) Nginx HTTP (v6) ALLOW Anywhere (v6)  管理 Nginx 现在，您已启动并运行了Web服务器，让我们回顾一些基本的管理命令。\n上一步，我们已经启动起来 Web 服务器了。接下来，让我们来学习一下 Nginx 的基本命令。\n要停止Web服务器，输入：\n$ sudo systemctl stop nginx 要在停止时，启动Web服务器，键入：\n$ sudo systemctl start nginx 要停止，然后再次启动该服务，键入：\n$ sudo systemctl restart nginx 如果我们只是修改配置，Nginx 可以在不终端的情况下热加载。我们可以键入：\n$ sudo systemctl reload nginx 设置服务器块（Server block） 使用Nginx Web服务器时，服务器块（类似于Apache中的虚拟主机）可用于封装配置详细信息，并在一台服务器中托管多个域。我们将建立一个名为 example.com 的域，但我们可以用自己的域名替换它。\n在 Ubuntu 上的 Nginx 默认情况下启用了一个服务器块（server block），服务器块的配置是为给服务器的目录提供地址 /var/www/html。尽管这对于单个站点非常有效，但是如果我们在服务器上托管多个站点，则可能变很臃肿。让我们给/var/www/html目录添加上分站点目录。\n比如我们的网站是 example.com ，那我们创建一个对应的目录 example.com 目录：\n$ sudo mkdir -p /var/www/example.com/html 接下来，使用$USER环境变量分配目录的所有权：\n$ sudo chown -R $USER:$USER /var/www/example.com/html 如果我们没有修改自己的umask值，那么 Web 根目录的权限应该正确，我们可以通过输入以下命令来确认：\n$ sudo chmod -R 755 /var/www/example.com 接下来，让我们来编辑index.html 可以使用 nano 编辑器或其他你用这顺手的编辑器：\n$ nano /var/www/example.com/html/index.html 在其中，添加以下示例HTML：\n/var/www/example.com/html/index.html\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Welcome to Example.com!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Success! The example.com server block is working!\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 完成后保存并关闭文件。\n接下来我们为 Nginx 来创建一个服务器块。与直接修改默认配置文件不同，我们在以下位置创建一个新文件：/etc/nginx/sites-available/example.com\n$ sudo nano /etc/nginx/sites-available/example.com 粘贴到以下内容添加到文件中，这个块的配置与默认块的配置相似，但针对我们的新目录和域名进行了更新：\n/etc/nginx/sites-available/example.com\nserver { listen 80; listen [::]:80; root /var/www/example.com/html; index index.html index.htm index.nginx-debian.html; server_name example.com www.example.com; location / { try_files $uri $uri/ =404; } } 接下来，让我们通过在sites-enabled目录新建一个链接，好让 Nginx 在启动过程中会读取这个目录：\n$ sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/ 现在已启用并配置了两个服务器块，以及基于它们的listen和server_name指令响应请求：\n example.com: 将会响应example.com 和 www.example.com的请求 default: 将会响应 80 端口的请求，以及不能匹配到两个服务器块上的请求  为避免可能由于添加其他服务器名称而引起的哈希存储区内存问题，有必要调整/etc/nginx/nginx.conf文件中的单个值。\n打开文件：\n$ sudo nano /etc/nginx/nginx.conf 找到server_names_hash_bucket_size指令并删除#符号：\n... http { ... server_names_hash_bucket_size 64; ... } ... 完成后保存并关闭文件。\n接下来，测试以确保我们在 Nginx 文件中的改动，没有任何问题：\nsudo nginx -t 如果没有任何问题，请重新启动 Nginx：\nsudo systemctl restart nginx \r\n有关要考虑的主题列表，请参阅themes.gohugo.io。本快速入门使用漂亮的Ananke 主题。\n首先，从 GitHub 下载主题并将其添加到您网站的themes目录中：\n$ cd quickstart $ git init $ git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 然后，将主题添加到站点配置中：\n$ echo theme = \\\u0026#34;ananke\\\u0026#34; \u0026gt;\u0026gt; config.toml  安装Certbot 首先我们得现在服务器上安装 Certbot\n安装Certbot 及 Nginx 插件 apt：\n$ sudo apt install certbot python3-certbot-nginx 选择 Y 后开始安装，安装完毕我们就可以使用 Certbot 了。\n接下来我们要验证一下 Certbot 是否能为Nginx 自动配置 SSL。\n让我们的防火墙允许HTTPS 需要先允许ufw使用\n$ sudo ufw enable 我们来查看一下当前状态。\n$ sudo ufw status 输出结果如果类似下面这样：\nStatus: active To Action From -- ------ ---- OpenSSH ALLOW Anywhere Nginx HTTP ALLOW Anywhere OpenSSH (v6) ALLOW Anywhere (v6) Nginx HTTP (v6) ALLOW Anywhere (v6) 说明防火墙允许HTTPS通信。但如果你的服务器不允许，那么请执行以下命令。\n$ sudo ufw allow \u0026#39;Nginx Full\u0026#39; $ sudo ufw delete allow \u0026#39;Nginx HTTP\u0026#39; 然后再让我们查看一下状态的变化。\n$ sudo ufw status 输出结果变为：\nStatus: active To Action From -- ------ ---- OpenSSH ALLOW Anywhere Nginx Full ALLOW Anywhere OpenSSH (v6) ALLOW Anywhere (v6) Nginx Full (v6) ALLOW Anywhere (v6) 在此处我们要注意把22,443,80几个端口加入白名单,不然可能后续会导致你进不去ssh\n$ sudo ufw allow 22 $ sudo ufw allow 80 $ sudo ufw allow 443 好的，接下来，让我们运行 Certbot 来获取我们的安全证书吧。\n\r\n获取 SSL 证书 Certbot 提供了获得 SSL 的方法。Nginx Plugins（插件） 帮助我们在必要的时候重新加载配置文件。让我们来开启这个插件。\n$ sudo certbot --nginx -d example.com -d www.example.com certbot与--nginx 插件一起运行，-d用于指定我们希望获得证书的域名。\n如果我们是第一次运行，那么 Certbot 将提示我们输入邮箱并阅读服务条款。\nInvalid email address: . Enter email address (used for urgent renewal and security notices) If you really want to skip this, you can run the client with --register-unsafely-without-email but make sure you then backup your account key from /etc/letsencrypt/accounts (Enter \u0026#39;c\u0026#39; to cancel): nginx@kalasearch.com - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Please read the Terms of Service at https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must agree in order to register with the ACME server at https://acme-v02.api.letsencrypt.org/directory - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - (A)gree/(C)ancel: 如果这是您第一次运行certbot，将提示您输入电子邮件地址并同意服务条款。\n完成此操作后，certbot开始与 Let\u0026rsquo;s Encrypt 服务器通信，然后开始验证我们是否是这个域名的真正拥有者。\n如果成功，certbot 会继续询问我们如何配置HTTPS。\nPlease choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1: No redirect - Make no further changes to the webserver configuration. 2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for new sites, or if you\u0026#39;re confident your site works on HTTPS. You can undo this change by editing your web server\u0026#39;s configuration. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Select the appropriate number [1-2] then [enter] (press \u0026#39;c\u0026#39; to cancel): 这个我建议选择2，然后回车。配置文件就会更新，Nginx 也会重新加载。Certbot 会显示一条消息，告诉我们整个过程已经完成，证书存储在服务器的什么位置上：\nIMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/example.com/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/example.com/privkey.pem Your cert will expire on 2020-11-01. To obtain a new or tweaked version of this certificate in the future, simply run certbot again with the \u0026#34;certonly\u0026#34; option. To non-interactively renew *all* of your certificates, run \u0026#34;certbot renew\u0026#34; - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let\u0026#39;s Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le 我们的证书已经下载并已经加载成功。我们可以使用 https:// 来进行访问。如果访问成功并且浏览器地址栏前面已经出现带锁的标志，那么说明我们的网站已经获得A级保护。\n接下来，我们学习如何续订这个安全证书。\n验证 Certbot 自动续订 我们获得的加密证书只有 90 天有效期，但不用担心，Certbot会帮我们解决续订问题，它会每天运行两次systemd监测程序来检查域名证书是否快到期。如果域名证书在近 30 天到期，它会自动续订这些域名的证书。\n我们可以输入以下命令来检查systemctl的状态：\nsudo systemctl status certbot.timer kalasearch@chuan-server:~$ sudo systemctl status certbot.timer ● certbot.timer - Run certbot twice daily Loaded: loaded (/lib/systemd/system/certbot.timer; enabled; vendor preset: enabled) Active: active (waiting) since Sat 2020-08-01 03:37:47 UTC; 46min ago Trigger: Sat 2020-08-01 12:54:45 UTC; 8h left Triggers: ● certbot.service Aug 01 03:37:47 chuan-server systemd[1]: Started Run certbot twice daily. 要测试域名证书的续订过程，我们可以输入以下命令：\nsudo certbot renew --dry-run 如果输出结果没有任何错误，则表明一切就绪。如果在未来，续订证书发生问题，那么也不用担心，Let\u0026rsquo;s Encrypt 会通过前面几步中我们留的邮箱联系我们，通知我们域名证书即将过期。\n总结 在本教程中，我们学习了如何安装 Let\u0026rsquo;s Encrypt 的客户端 certbot。以及如何使用certbot 为我们的域名下载了 SSL 证书。以及学习了如何设置 certbot 让它自动帮我们更新证书。如果你对使用 Certbot 还有疑问，可以在本文下面留言，也可以查看它的官方文档。\n原文  如何在 Ubuntu 20.04 中安装和配置 Nginx 如何在 Ubuntu20.04 上使用 Let’s Encrypt 给 Nginx 加密（SSL  Image Share 相册语法来自 Typlog\n","date":"2021-08-23T00:00:00Z","image":"https://ShermanXie1998.github.io/p/%E5%A6%82%E4%BD%95%E5%9C%A8ubuntu%E4%B8%8A%E7%BB%99http%E5%8A%A0%E5%AF%86%E6%88%90https/8-23-img15_hud695364f957953335d1a70c09d93bd4f_6789_120x120_fill_q75_box_smart1.jpg","permalink":"https://ShermanXie1998.github.io/p/%E5%A6%82%E4%BD%95%E5%9C%A8ubuntu%E4%B8%8A%E7%BB%99http%E5%8A%A0%E5%AF%86%E6%88%90https/","title":"如何在Ubuntu上给HTTP加密成HTTPS"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://ShermanXie1998.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://ShermanXie1998.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode \r\r Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019  Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","date":"2019-03-10T00:00:00Z","permalink":"https://ShermanXie1998.github.io/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://ShermanXie1998.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://ShermanXie1998.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files  Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://ShermanXie1998.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }","date":"2019-03-05T00:00:00Z","image":"https://ShermanXie1998.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://ShermanXie1998.github.io/p/emoji-support/","title":"Emoji Support"}]