<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sherman&#39;s Blog</title>
    <link>https://ShermanXie1998.github.io/post/</link>
    <description>Recent content in Posts on Sherman&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ShermanXie1998.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UE5的黑科技探寻</title>
      <link>https://ShermanXie1998.github.io/p/ue5%E7%9A%84%E9%BB%91%E7%A7%91%E6%8A%80%E6%8E%A2%E5%AF%BB/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ShermanXie1998.github.io/p/ue5%E7%9A%84%E9%BB%91%E7%A7%91%E6%8A%80%E6%8E%A2%E5%AF%BB/</guid>
      <description>虚幻5初体验 虚幻5的抢先体验版已经发布到了Epic Game Launcher上，对应的源码工程也可以在官方的Github网站上拿到。

虚幻引擎5中文技术文档: https://docs.unrealengine.com/5.0/zh-CN/
虚幻引擎5源码地址: https://github.com/EpicGames/UnrealEngine/tree/ue5-early-access
虚幻引擎5官方入门课程链接: https://www.unrealengine.com/zh-CN/onlinelearning-courses/ue5-early-access-quickstart
此外，官方还免费给用户提供了视频演示中的Demo，方便大家快速体验新的功能与特性。（备注：工程98GB，最低系统要求为NVIDIA GTX 1080/AMD RX Vega 64或以上显卡，8GB显存、32GB系统内存）

打开编辑器，会发现虚幻5的界面有了较大的改动。扁平化的设计使界面看起来更为清晰和简洁，很大程度地改善了用户的预览体验。

当然，虚幻5的重头戏主要在新发布的两个核心技术上，Nanite和Lumen。我们可以通过Demo预览一个拥有数亿个三角形的场景，也可以动态调整光源参数来实时预览全局光照效果。

除了渲染上的变化,还有很多新的功能:  引擎内置集成了Quxiel的Bridge工具，可以直接将扫描的高清资产拖入到引擎中使用. 提供了全新的关卡加载系统WorldPartition，可以实时灵活地加载地图数据 全新的关卡协作编辑方式，支持多人合作编辑关卡，提供工作效率 提供了新的GameplayFeaturePlugin，可以迅速设计玩法原型 FullBodyIK、Root Motion Warpping等新的动画系统，可以自适应地形的实时调整骨骼位置 ControlRig得到完善，可以在编辑器内自定义调整骨骼动画，动画工作流程得到进一步优化 MetaSound，可以在编辑器内对音频做更为丰富的操作 Perforce插件支持Change list版本管理 支持Python脚本  
 技术 如果有朋友和我一样一直在关注着虚幻5，就会发现它早已不像最初那般神秘，各路大佬的深挖也让我们能更客观地看待这个引擎和相关的技术。
虚幻5最具代表性和影响力的核心技术有两项 ：Nanite和Lumen
Nanite Nanite，中文翻译为虚拟微多边形体几何体技术，简单来说就是引擎可以在运行时支持包含几乎无限个三角面的模型，即美术们可以将拥有数以亿计的多边形的模型直接导入到虚幻引擎中使用。如果这项技术真的能在工业界广泛应用，对游戏和影视行业的影响可以说是颠覆性的。

科普一下，我们常见的三维游戏世界（或CG场景）一般都是由三角面构成的，计算机通过对三角面逐个渲染从而展示出整个画面。一个3A游戏场景往往由数千万个三角面构成（包括人物、地形、建筑等），而一个科幻电影更是夸张到需要对数亿甚至数十亿的三角面进行渲染。
显然，三角面的数量越多，渲染的速度就越慢（虽然现在的显卡越来越强大），所以对于需要实时渲染的游戏来说，除了想尽办法剔除不展示的三角面，减少可见的三角面也是一个不得不做的妥协。

那么如何减少可见的三角面呢？技术上我们可以采用LOD动态减少三角面的数量（边坍缩技术）。但工业界常用的手段是在一开始就限制主模型的面数，一般会先在Zbrush里制作高模，然后烘焙置换贴图或法线贴图到低模上（保存更多的细节信息用于渲染流程中的光照计算），这样一个面数很低的模型也能表现出接近高模的效果。
显然这是为了性能的不得已而为，关注点集中在艺术效果的美术们必然不喜欢这冗余而繁杂的流程。如果虚幻5真的可以支持近乎无限的三角面数量，那么一定会大大解放艺术家们的生产力，这套高模烘焙低模的方式也会随着历史的推进逐渐被掩埋。
模型制作流程
相比画面效果，程序们当然更关注技术细节。从名字“虚拟微多边形”的“虚拟”二字，我们就很容易联想到操作系统中的虚拟内存技术。“虚拟内存”技术的核心思想是将硬盘虚拟为内存，通过动态替换的方式解决内存空间不足的问题（当然还有其他很多方面的意义）。
虚拟内存示意(简化版)
同理，渲染领域也有一个原理类似的技术称为“虚拟纹理”，由于GPU的显存有限，无法将一个复杂大场景的纹理全部存储，因此可以将这些纹理合成之后再存储到硬盘中。在渲染时根据屏幕上用到的资源索引进行实时更新，图形大神卡马克在2000年左右就成功地将纹理虚拟化技术应用在了游戏毁灭战士3（Doom 3）中。
虚拟纹理示意</description>
    </item>
    
    <item>
      <title>利用GitHub Pages搭建个人博客</title>
      <link>https://ShermanXie1998.github.io/p/%E5%88%A9%E7%94%A8github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ShermanXie1998.github.io/p/%E5%88%A9%E7%94%A8github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>引言  技术写作工具|Github + Markdown 的新轻型技术写作模式速览 技术文档方案|Github + Markdown 的深度实践解析  新建一个GitHub库   注册一个 GitHub 账号。如果你已有账号，直接登录。如果你没有账号，注册并登录。
  打开 GitHub Pages 官网，浏览并了解 User or organization site 部分对应的操作步骤。 GitHub Pages: https://pages.github.com
  新建一个 GitHub repository，库名为 username.http://github.io，username 即你的 GitHub 账号 username。新建 repository：github.com/new 
   安装Hugo并新建Hugo网站 此部分网上的方法很多,因此不过多赘述.
Hugo安装指南 https://gohugo.io/getting-started/installing/
 构建Hugo网站 在Hugo网站文件夹的根目录下,执行hugo命令来构建
$ hugo # 构建你的Hugo网站,默认将静态站点保存到&amp;#34;public&amp;#34;目录 注意: Hugo会将构建的网站内容默认保存至网站根目录的 public/文件夹中.
 将网站文件夹转换为 Git 库。 1.进入 XXX/public目录,初始化Git库.
$ cd public $ git init #初始化Git库 2.</description>
    </item>
    
    <item>
      <title>UWP上传第三方包的打包方式</title>
      <link>https://ShermanXie1998.github.io/p/uwp%E4%B8%8A%E4%BC%A0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E7%9A%84%E6%89%93%E5%8C%85%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ShermanXie1998.github.io/p/uwp%E4%B8%8A%E4%BC%A0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E7%9A%84%E6%89%93%E5%8C%85%E6%96%B9%E5%BC%8F/</guid>
      <description>引言 在阅读本文前,请先确定您使用开发是基于Visual studio 2019的UWP平台.
1.创建证书 打开你的Package文件,点击publisher的选择证书,然后点击创建新证书.
这里只需要输入Publisher Common Name,先不要填,往下看.
 2.找到Publisher Common Name. 首先我们需要打开微软的合作中心,请确保你拥有一个开发者账号,如果没有的话你是进不到这个网页里的.
你需要先点击概述,创建新应用或选择你已经创建好需要发布的应用.然后点击产品管理里的产品标识.
在此界面上只需要把&amp;quot;包/标识/发行商&amp;quot;里CN后面的一串数字复制,然后再粘贴到Visual Studio内的Publisher Common Name内即可.这样你的信任证书就已经生成了.
 3.如何进行打包 首先,你需要点击Project-&amp;gt;项目属性-&amp;gt;Bulid,把Platform target选择到你所需要的平台,开启.Net本地链与优化代码,进行此步骤的原因是要生成用于商店发布的misxupload文件.
然后右键你的项目,点击publish-&amp;gt;创建APP package
选择第二个选项,然后登录你的账户后选择你要发布到Microsoft store的Identity.更改你所需的APP版本号与所需平台后即可点击创建.
  在此处要注意的是,发布版本只能越来越大,不能在商店上发布一个高版本后再降低版本号.
  另外如果你使用了第三方的依赖,一定要确定可以在你所打包的平台(x86/x64)下可以运行,不然也不会打包成功.
   4.上传至商店 在你编译软件的目录内寻找AppPackages的文件,打开后找到后缀为Msixupload的文件.然后回到微软的合作中心页面,在应用程序概述内找到提交-&amp;gt;程序包,然后把你刚生成的Msixupload文件上传上去.这样关于UWP第三方文件的打包与上传就完成了.
 5.UWP上架失败因为没有添加隐私策略问题 在使用 UWP 上架之前需要经过微软的审核，在美国很看重个人隐私，因此需要在两个地方都填写上隐私策略。第一个是应用商店里面，第二个是应用程序里面 如果是个人开发者，我的推荐是在 github 或 gitee 创建一个叫隐私策略的文件，复制这个链接填写在应用商店管理的属性上，请看下图
如何写隐私策略请看 win10 uwp 隐私声明 注意修改软件名然后打开代码，在代码里面添加一个叫 PrivacyPolicyURL 的静态属性，将隐私策略放在这个属性，然后写一个文本超链接用于打开
public static class PrivacyPolicy { public static string PrivacyPolicyURL { get; } = &amp;#34;https://github.com/lindexi/UWP/blob/master/uwp/src/%E9%9A%9 0%E7%A7%81%E7%AD%96%E7%95%A5/Privacy%20Policy.md&amp;#34;; } 在界面添加超链接</description>
    </item>
    
    <item>
      <title>使用Hugo创建个人博客方式</title>
      <link>https://ShermanXie1998.github.io/p/%E4%BD%BF%E7%94%A8hugo%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ShermanXie1998.github.io/p/%E4%BD%BF%E7%94%A8hugo%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%96%B9%E5%BC%8F/</guid>
      <description>引言 使用美丽的 Ananke 主题创建一个 Hugo 站点。添加超时和断路器等等，所有这些功能都不必更改应用程序本身的代码。
此快速入门macOS在示例中使用。有关如何在其他操作系统上安装 Hugo 的说明，请参阅安装。
建议安装 Git来运行本教程。
对于其他学习 Hugo 的方法，如书本或视频教程，请参阅外部学习资源页面。
Install Hugo 在 macOS、Windows、Linux、OpenBSD、FreeBSD 以及任何可以运行 Go 编译器工具链的机器上安装 Hugo。
 适用于 x64、i386 和 ARM 架构的 macOS (Darwin) Windows Linux OpenBSD FreeBSD   Chocolatey (Windows) 如果您在 Windows 机器上并使用Chocolatey进行包管理，则可以使用以下单行安装 Hugo：
$ choco install hugo -confirm 或者，如果您需要“扩展”Sass/SCSS 版本：
$ choco install hugo-extended -confirm  Create a New Site $ hugo new site quickstart 创建名为quickstart的文件夹
 Add a Theme 有关要考虑的主题列表，请参阅themes.gohugo.io。本快速入门使用漂亮的Ananke 主题。</description>
    </item>
    
    <item>
      <title>如何在Ubuntu上给HTTP加密成HTTPS</title>
      <link>https://ShermanXie1998.github.io/p/%E5%A6%82%E4%BD%95%E5%9C%A8ubuntu%E4%B8%8A%E7%BB%99http%E5%8A%A0%E5%AF%86%E6%88%90https/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ShermanXie1998.github.io/p/%E5%A6%82%E4%BD%95%E5%9C%A8ubuntu%E4%B8%8A%E7%BB%99http%E5%8A%A0%E5%AF%86%E6%88%90https/</guid>
      <description>准备工作 要学习本教程，我们需要先准备：
  有 sudo 的 root 用户权限，大家可根据《Ubuntu 120.04初始服务器设置》（撰写中，稍后上线）指南来配置自己的服务器。
  注册域名。本教程使用example.com作为范例。大家可以在阿里云购买一个域名，.com 域名一年60多块钱。
  为服务器设置了以下两个DNS记录。
 example.com 的A记录指向服务器公网IP www.example.com的A记录指向服务器公网IP    请确保一个域对应一个server block。在本教程中，我们使用/etc/nginx/sites-available/example.com 来作为操作对象。
  安装 Nginx 由于 Nginx 可以从 ubuntu 软件源中获得，因此我们可以使用 apt 来安装 Nginx。
我们可以使用以下命令安装 Nginx 到 Ubuntu 中。
$ sudo apt update $ sudo apt install nginx 选择 Y 来开始安装，apt 会帮你把 Nginx 和它所必备的依赖安装到我们的服务器中。
 调整防火墙 在测试 Nginx 之前，我们需要调整防火墙，让他允许 Nginx 服务通过。Nginx ufw 在安装时会把他自身注册成为服务。
$ sudo ufw app list 输出结果:</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://ShermanXie1998.github.io/p/markdown-syntax-guide/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ShermanXie1998.github.io/p/markdown-syntax-guide/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rich Content</title>
      <link>https://ShermanXie1998.github.io/p/rich-content/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ShermanXie1998.github.io/p/rich-content/</guid>
      <description>&lt;p&gt;Hugo ships with several &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Built-in Shortcodes&lt;/a&gt; for rich content, along with a &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/about/hugo-and-gdpr/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Privacy Config&lt;/a&gt; and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Placeholder Text</title>
      <link>https://ShermanXie1998.github.io/p/placeholder-text/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ShermanXie1998.github.io/p/placeholder-text/</guid>
      <description>&lt;p&gt;Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Math Typesetting</title>
      <link>https://ShermanXie1998.github.io/p/math-typesetting/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ShermanXie1998.github.io/p/math-typesetting/</guid>
      <description>&lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://ShermanXie1998.github.io/p/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ShermanXie1998.github.io/p/emoji-support/</guid>
      <description>&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
